#!/usr/bin/env zsh

function install_command_line_tools {
  if pkgutil --pkg-info=com.apple.pkg.CLTools_Executables &> /dev/null; then
    return
  fi

  echo "To install the OS X Command Line Tools, click on the install button on the dialogue that appears"
  echo -en "\tPress enter to continue... "
  read

  xcode-select --install

  echo -en "\tPress enter when the installation is complete"
  read

  if pkgutil --pkg-info=com.apple.pkg.CLTools_Executables &> /dev/null; then
    success "Done installing OS X Command Line Tools"
  else
    fail "Command line tools not found"
  fi
}

function install_homebrew {
  if ! hash brew &> /dev/null; then
    echo "Installing Homebrew"
    (cd ~; echo -e "\n" | ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" &> /dev/null)
    success "Done installing Homebrew"
  fi
}

function install_brews {
  if hash brew &> /dev/null; then
    echo "Installing $1 Brews"

    brew update &> /dev/null

    if [ $1 == "ZSH" ]; then

      if [ -z "$(brew --prefix zsh-completions &> /dev/null)" ]; then
        brew install zsh-completions &> /dev/null
      else
        brew upgrade zsh-completions &> /dev/null
      fi

      if [ -z "$(brew --prefix zsh-history-substring-search &> /dev/null)" ]; then
        brew install zsh-history-substring-search &> /dev/null
      else
        brew upgrade zsh-history-substring-search &> /dev/null
      fi

      if [ -z "$(brew --prefix zsh-syntax-highlighting &> /dev/null)" ]; then
        brew install zsh-syntax-highlighting &> /dev/null
      else
        brew upgrade zsh-syntax-highlighting &> /dev/null
      fi

      if [ -z "$(brew cask &> /dev/null)" ]; then
        brew tap caskroom/cask &> /dev/null
        brew install brew-cask &> /dev/null
      else
        brew upgrade brew-cask &> /dev/null
      fi

    else
      export HOMEBREW_CASK_OPTS="--appdir=/Applications"
      brew tap homebrew/bundle
      brew bundle
    fi

    success "Done installing Brews"
  fi
}

function install_oh_my_zsh {
  if [ -z "$ZSH" ]; then
    ZSH=$HOME/.oh-my-zsh
  fi

  if [ ! -d "$ZSH" ]; then
    echo "Installing Oh My Zsh\n"

    sh -c "$(cd ~)" &> /dev/null
    sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)" &> /dev/null

    sh -c "$(curl -L https://iterm2.com/misc/install_shell_integration.sh | bash)" &> /dev/null

    success "Done installing Oh My Zsh"
  fi
}

function install_dotfiles {
  current_path="${PWD}"
  current_dir="${PWD##*/}"
  git_user_name="$(git config --get user.name | tr -d '\n')"
  git_user_email="$(git config --get user.email | tr -d '\n')"

  if [ ! -d "$HOME/.dotfiles" ]; then
    fail "Clone dotfiles to ~/.dotfiles and re-run bootstrap"
  fi

  if [ ${current_dir} != "$HOME/.dotfiles" ]; then
    cd "$HOME/.dotfiles"
  fi

  if [ "git branch --list master" ]; then
    echo "Updating the repository..."
    git fetch origin &> /dev/null
    git reset --hard origin/master &> /dev/null
    success "Done"
  fi

  for file in "aliases" "exports" "functions" "gitconfig" "gitignore" "gitmessage" "inputrc" "zshrc"; do
    complete_file_path=${current_path}/${file}

    if [ -f ${complete_file_path} ]; then
      rm -f $HOME/.${file}
      cp -f ${complete_file_path} $HOME/.${file}
    fi
  done
  unset file
  success "Done copying dotfiles to your home directory"

  if [ ! -d $HOME/bin ]; then
    mkdir -p $HOME/bin
  fi

  for file in ${current_path}/bin/*; do
    binlink=$HOME/bin/$(basename ${file})
    rm -f ${binlink}
    cp -f ${file} ${binlink}
    chmod +x ${binlink}
  done
  unset file
  success "Done copying custom commands to your home bin directory"
  success "Completed dotfiles bootstrapping"

  echo ${git_user_name} \<${git_user_email}\>
  echo
  read -p "Are these your git user details? (y/n) " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    git config --global user.name "${git_user_name}"
    git config --global user.email "${git_user_email}"
    success "Cool"
  else
    echo "Setup your git user details"

    read -p "Enter your git name: " $git_user_name
    git config --global user.name "${git_user_name}"

    read -p "Enter your git email: " $git_user_email
    git config --global user.email "${git_user_email}"

    success "Saved"
  fi
}

function success () {
  echo "[ \033[00;32mOK\033[0m ] $1\n"
}

function fail () {
  echo "[\033[0;31mFAIL\033[0m] $1\n"
  exit
}

# Ask for the administrator password upfront.
sudo -v

# Keep-alive: update existing `sudo` time stamp until the script has finished.
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

install_command_line_tools
install_homebrew

if [ "$1" == "--force" -o "$1" == "-f" -o "$1" == "-yes" -o "$1" == "-y" ]; then
  install_brews
  install_oh_my_zsh
  install_dotfiles
else
  read -p "Ready to install brews. This will install ALL brews and casks in the Brewfile. Are you sure? (y/n) " -n 1
  echo "\n"
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    install_brews
  else
    install_brews ZSH
  fi

  install_oh_my_zsh

  read -p "Ready to install dotfiles. This will overwrite any matching existing files in your home directory. Are you sure? (y/n) " -n 1
  echo "\n"
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    install_dotfiles
  fi
fi

env zsh
