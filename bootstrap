#!/usr/bin/env bash

function auto_update {
  if [ "git branch --list master" ]; then
    echo "Pulling from GitHub..."

    git fetch origin &> /dev/null

    if [ -n "$(git log HEAD..origin/master)" ]; then
      echo Hell yeah, running self-update process...
      git reset --hard origin/master &> /dev/null
      ./$(basename $0) && exit
    fi

    success "Done"
  fi
}

function install_command_line_tools {
  if xcode-select -p 1> /dev/null; then
    return
  fi

  echo "To install the OS X Command Line Tools, click on the install button on the dialogue that appears"
  echo -en "\tPress enter to continue... "
  read

  xcode-select --install

  echo -en "\tPress enter when the installation is complete"
  read

  if xcode-select -p 1> /dev/null; then
    success "Done installing OS X Command Line Tools"
  else
    fail "Command line tools not found"
  fi
}

function install_homebrew {
  if ! hash brew &> /dev/null; then
    echo "Installing Homebrew"
    (cd ~; echo -en "\n" | ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" &> /dev/null)
    success "Done installing Homebrew"
  fi
}

function is_brew_installed {
  for i in $(brew list -1); do
    if [[ "$i" == "$1" ]]; then
      echo 1;
    fi;
  done
}

function install_brews {
  if hash brew &> /dev/null; then

    echo "Updating the Brew repository..."
    brew update &> /dev/null

    brews_installed=0;

    if [[ $1 == "ZSH" ]]; then
      for brew in {zsh,zsh-completions,zsh-history-substring-search,zsh-syntax-highlighting}; do
        if [ -z "$(is_brew_installed $brew)" ]; then
          echo "Installing $brew"

          brew install $brew &> /dev/null
        elif [ -n "$(brew outdated $brew)" ]; then
          echo "Upgrading $brew"

          brew upgrade $brew &> /dev/null
        fi

        ((brews_installed++))
      done
      unset brew

    else
      echo "Installing all Brews"

      brew bundle install --verbose --file=Brewfile &> dotfiles.log

      ((brews_installed++))
    fi

    if [ $brews_installed -gt 0 ]; then
      success "Done installing Brews and Casks"
    else
      success "Nothing to install or update"
    fi

  fi
}

function install_oh_my_zsh {
  if [ -z "$ZSH" ]; then
    ZSH=$HOME/.oh-my-zsh
  fi

  if [ ! -d "$ZSH" ]; then
    echo -en "Installing Oh My Zsh\n"

    sh -c "$(cd ~)" &> /dev/null
    sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" &> /dev/null

    # https://www.iterm2.com/documentation-shell-integration.html
    sh -c "$(curl -L https://iterm2.com/misc/install_shell_integration.sh | bash)" &> /dev/null

    success "Done installing Oh My Zsh"
  else
    echo "Upgrading Oh My Zsh"

    env ZSH=$ZSH sh $ZSH/tools/upgrade.sh &> /dev/null

    success "Done upgrading Oh My Zsh"
  fi
}

function install_dotfiles {
  DOTFILES_DIR="$HOME/.dotfiles"
  current_path="${PWD}"
  current_dir="${PWD##*/}"
  git_user_name="$(git config --get user.name | tr -d '\n')"
  git_user_email="$(git config --get user.email | tr -d '\n')"
  gpg_key="$(git config --get user.signingkey | tr -d '\n')" # string

  if [ ! -d "$DOTFILES_DIR" ]; then
    fail "Clone dotfiles to ~/.dotfiles and re-run bootstrap"
  fi

  if [ ${current_dir} != "$DOTFILES_DIR" ]; then
    cd "$DOTFILES_DIR"
  fi

  for file in "aliases" "exports" "functions" "gitconfig" "gitignore" "gitmessage" "inputrc" "zshrc"; do
    complete_file_path=${current_path}/${file}

    if [ -f ${complete_file_path} ]; then
      rm -f $HOME/.${file}
      cp -f ${complete_file_path} $HOME/.${file}
    fi
  done
  unset file
  success "Done copying dotfiles to your home directory"

  if [ ! -d $HOME/bin ]; then
    mkdir -p $HOME/bin
  fi

  for file in ${current_path}/bin/*; do
    binlink=$HOME/bin/$(basename ${file})
    rm -f ${binlink}
    cp -f ${file} ${binlink}
    chmod +x ${binlink}
  done
  unset file
  success "Done copying custom commands to your home bin directory"
  success "Completed dotfiles bootstrapping"

  # Bundle ZSH plugins using antidote plugin manager
  echo "Bundling ZSH plugins"
  if [ ! -f $DOTFILES_DIR/zsh/plugins.txt ]; then
    fail "Missing ZSH plugins files for Antidote"
  else
    antidote bundle < $DOTFILES_DIR/zsh/plugins.txt > $HOME/.zsh_plugins.sh
    success "Done bundling ZSH plugins"
  fi

  # Verify git user & email
  echo ${git_user_name} \<${git_user_email}\>
  # Verify user details & GPG
  if [ -n $gpg_key ]; then
    echo "--- ${gpg_key} ---"
  fi

  echo
  read -p "Are these your git user details? (y/n) " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    git config --global user.name "${git_user_name}"
    git config --global user.email "${git_user_email}"
    if [ -n $gpg_key ]; then
      git config --global user.signingkey "${gpg_key}"
    fi
    success "Cool"
  else
    echo "Setup your git user details"

    read -p "Enter your git name: " git_user_name
    git config --global user.name "${git_user_name}"

    read -p "Enter your git email: " git_user_email
    git config --global user.email "${git_user_email}"

    success "Saved"
  fi
}

function success () {
  echo -e "[ \033[00;32mOK\033[0m ] $1\n"
}

function fail () {
  echo -e "[\033[0;31mFAIL\033[0m] $1\n"
  exit
}

# Ask for the administrator password upfront.
sudo -v

# Keep-alive: update existing `sudo` time stamp until the script has finished.
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

auto_update
install_command_line_tools
install_homebrew

read -p "$(tput setaf 4)$(tput bold)Ready to install brews. This will install ALL brews and casks in the Brewfile. Are you sure? (y/n) $(tput sgr 0)" -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
  success "Cool"

  install_brews
else
  success "Cool"

  install_brews ZSH
fi

install_oh_my_zsh

read -p "$(tput setaf 4)$(tput bold)Ready to install dotfiles. This will overwrite any matching existing files in your home directory. Are you sure? (y/n) $(tput sgr 0)" -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
  success "Cool"

  install_dotfiles
fi

echo "Reloading shell..."
exec zsh
